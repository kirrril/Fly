//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/UniversalActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/UniversalActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @UniversalActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @UniversalActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UniversalActions"",
    ""maps"": [
        {
            ""name"": ""UniversalMap"",
            ""id"": ""782ae291-cf75-45d7-a243-953d756be56a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""426bba86-52c9-4005-965f-a41f4a4c8b0d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""7a0712c9-cc2e-432c-af3a-a066d3566f23"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""c618adbd-dd18-476a-b1db-8dd0850e4f28"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""0571867c-4925-4a9f-bdaa-a2b3033505b0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""5c1c2e39-4934-4a74-bfa4-b203f235f1c4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenGizmo"",
                    ""type"": ""Button"",
                    ""id"": ""264a4818-a839-4b16-9f2f-77fe8a567766"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenUI"",
                    ""type"": ""Button"",
                    ""id"": ""da6acb29-20f2-40d5-a2d3-3f55e70fb304"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PositionRight"",
                    ""type"": ""Value"",
                    ""id"": ""4558f8db-1be5-4a9e-b95e-1dd2e68c826e"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationRight"",
                    ""type"": ""Value"",
                    ""id"": ""92bb3b81-7365-4d8a-97e2-afd36f78d805"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PositionLeft"",
                    ""type"": ""Value"",
                    ""id"": ""17caeba9-0439-4321-a86a-edfde4c37e68"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationLeft"",
                    ""type"": ""Value"",
                    ""id"": ""059dc53d-d066-425c-af03-b5aebd7d468c"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadPosition"",
                    ""type"": ""Value"",
                    ""id"": ""4a0163e0-92a0-4271-8c58-435212e42d49"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadRotation"",
                    ""type"": ""Value"",
                    ""id"": ""d8b4d78a-87bd-47ca-9ead-a14ce07ae2e4"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadTrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""451475d2-90b8-4a4f-93d4-525d37996fc7"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftTrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""5f683c41-c17e-4b3a-a8a1-4f10ae463a90"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""0377da22-ee72-4b7c-8a4f-cd6656fed3fd"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic"",
                    ""type"": ""Value"",
                    ""id"": ""43bbf96d-ff53-4352-8513-140c2c2aee7d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fly"",
                    ""type"": ""Value"",
                    ""id"": ""2cdfc19d-7e4a-44b2-b1fa-5836e6cc2c15"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveHead"",
                    ""type"": ""Value"",
                    ""id"": ""6e0eaa10-9ff7-4a5d-b1f5-34843064dccb"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d62919f1-9b63-4614-a6d1-1445ba1c7ab0"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b4ec201c-3359-4bc7-b03b-7f4daf1bae13"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""95b7339b-6090-435d-9026-18404d8edc38"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""badbd1f2-3829-4ce4-a86b-c9413b820d28"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cc46a596-23a2-4f01-b6c6-786a2564d21c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f02c6e21-a109-41a1-9ec6-a54656083293"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d31d0af-7acd-4a2d-8056-c2ab827b240c"",
                    ""path"": ""<XRHMD>/{DeviceRotation}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a97791e-a0f1-4b7a-b4a0-aa173758de5b"",
                    ""path"": ""<XRController>{RightHand}/devicePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59445f20-2887-453a-b506-130ea70d5823"",
                    ""path"": ""<XRController>{LeftHand}/devicePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78d67396-fdfa-49b5-909f-2c9dca522608"",
                    ""path"": ""<XRController>{LeftHand}/gripButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f871ef73-df9b-42c2-913e-45b5fa3869ff"",
                    ""path"": ""<XRController>{RightHand}/gripButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6bb97d5-754b-45a7-bef7-5bc3644842d4"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryTrigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39a4c9e3-4c06-45ae-96d6-cd5597194901"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryTrigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c9784fb-6c3d-42fe-8968-2509e91abca4"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5a02cfa-6c1a-46e0-9f62-3f1426d2e07c"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0df06e02-08ad-477a-ac41-5818156441f2"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenGizmo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8127c8bd-10e3-4f09-a416-eea01cb3691f"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4149b305-66fb-4ccd-bf43-1ae563fa081a"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PositionRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bad6a537-9597-4583-9256-03fcebea7597"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddac6217-0c56-42e6-839c-e6d475e8efa1"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PositionLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38ab2760-0342-4fcf-83c6-68502d5bf779"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0f203ce-abea-4b93-8908-24152d21e711"",
                    ""path"": ""<XRHMD>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d07cbd9-d610-4335-be85-173681a302f5"",
                    ""path"": ""<XRHMD>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2d65a34-89e2-41d2-861a-43af57b82308"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadTrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""141a8fbe-773c-4793-9b4e-2fabdb79c33b"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fc45418-ae5c-49cc-85d1-84b094cd5f37"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""add59c8e-1d20-4429-b41f-bee98daf1392"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haptic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e229add-62c7-4b7f-b562-6daa0e2b0c14"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fb5c650-9b79-4360-8f79-2b9e91a33780"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ab22f89-59c9-4498-949d-1cf72523d01b"",
                    ""path"": ""<XRHMD>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHead"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UniversalMap
        m_UniversalMap = asset.FindActionMap("UniversalMap", throwIfNotFound: true);
        m_UniversalMap_Move = m_UniversalMap.FindAction("Move", throwIfNotFound: true);
        m_UniversalMap_Look = m_UniversalMap.FindAction("Look", throwIfNotFound: true);
        m_UniversalMap_Point = m_UniversalMap.FindAction("Point", throwIfNotFound: true);
        m_UniversalMap_Grab = m_UniversalMap.FindAction("Grab", throwIfNotFound: true);
        m_UniversalMap_Click = m_UniversalMap.FindAction("Click", throwIfNotFound: true);
        m_UniversalMap_OpenGizmo = m_UniversalMap.FindAction("OpenGizmo", throwIfNotFound: true);
        m_UniversalMap_OpenUI = m_UniversalMap.FindAction("OpenUI", throwIfNotFound: true);
        m_UniversalMap_PositionRight = m_UniversalMap.FindAction("PositionRight", throwIfNotFound: true);
        m_UniversalMap_RotationRight = m_UniversalMap.FindAction("RotationRight", throwIfNotFound: true);
        m_UniversalMap_PositionLeft = m_UniversalMap.FindAction("PositionLeft", throwIfNotFound: true);
        m_UniversalMap_RotationLeft = m_UniversalMap.FindAction("RotationLeft", throwIfNotFound: true);
        m_UniversalMap_HeadPosition = m_UniversalMap.FindAction("HeadPosition", throwIfNotFound: true);
        m_UniversalMap_HeadRotation = m_UniversalMap.FindAction("HeadRotation", throwIfNotFound: true);
        m_UniversalMap_HeadTrackingState = m_UniversalMap.FindAction("HeadTrackingState", throwIfNotFound: true);
        m_UniversalMap_LeftTrackingState = m_UniversalMap.FindAction("LeftTrackingState", throwIfNotFound: true);
        m_UniversalMap_RightTrackingState = m_UniversalMap.FindAction("RightTrackingState", throwIfNotFound: true);
        m_UniversalMap_Haptic = m_UniversalMap.FindAction("Haptic", throwIfNotFound: true);
        m_UniversalMap_Fly = m_UniversalMap.FindAction("Fly", throwIfNotFound: true);
        m_UniversalMap_MoveHead = m_UniversalMap.FindAction("MoveHead", throwIfNotFound: true);
    }

    ~@UniversalActions()
    {
        UnityEngine.Debug.Assert(!m_UniversalMap.enabled, "This will cause a leak and performance issues, UniversalActions.UniversalMap.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UniversalMap
    private readonly InputActionMap m_UniversalMap;
    private List<IUniversalMapActions> m_UniversalMapActionsCallbackInterfaces = new List<IUniversalMapActions>();
    private readonly InputAction m_UniversalMap_Move;
    private readonly InputAction m_UniversalMap_Look;
    private readonly InputAction m_UniversalMap_Point;
    private readonly InputAction m_UniversalMap_Grab;
    private readonly InputAction m_UniversalMap_Click;
    private readonly InputAction m_UniversalMap_OpenGizmo;
    private readonly InputAction m_UniversalMap_OpenUI;
    private readonly InputAction m_UniversalMap_PositionRight;
    private readonly InputAction m_UniversalMap_RotationRight;
    private readonly InputAction m_UniversalMap_PositionLeft;
    private readonly InputAction m_UniversalMap_RotationLeft;
    private readonly InputAction m_UniversalMap_HeadPosition;
    private readonly InputAction m_UniversalMap_HeadRotation;
    private readonly InputAction m_UniversalMap_HeadTrackingState;
    private readonly InputAction m_UniversalMap_LeftTrackingState;
    private readonly InputAction m_UniversalMap_RightTrackingState;
    private readonly InputAction m_UniversalMap_Haptic;
    private readonly InputAction m_UniversalMap_Fly;
    private readonly InputAction m_UniversalMap_MoveHead;
    /// <summary>
    /// Provides access to input actions defined in input action map "UniversalMap".
    /// </summary>
    public struct UniversalMapActions
    {
        private @UniversalActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UniversalMapActions(@UniversalActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_UniversalMap_Move;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/Look".
        /// </summary>
        public InputAction @Look => m_Wrapper.m_UniversalMap_Look;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/Point".
        /// </summary>
        public InputAction @Point => m_Wrapper.m_UniversalMap_Point;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/Grab".
        /// </summary>
        public InputAction @Grab => m_Wrapper.m_UniversalMap_Grab;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/Click".
        /// </summary>
        public InputAction @Click => m_Wrapper.m_UniversalMap_Click;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/OpenGizmo".
        /// </summary>
        public InputAction @OpenGizmo => m_Wrapper.m_UniversalMap_OpenGizmo;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/OpenUI".
        /// </summary>
        public InputAction @OpenUI => m_Wrapper.m_UniversalMap_OpenUI;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/PositionRight".
        /// </summary>
        public InputAction @PositionRight => m_Wrapper.m_UniversalMap_PositionRight;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/RotationRight".
        /// </summary>
        public InputAction @RotationRight => m_Wrapper.m_UniversalMap_RotationRight;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/PositionLeft".
        /// </summary>
        public InputAction @PositionLeft => m_Wrapper.m_UniversalMap_PositionLeft;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/RotationLeft".
        /// </summary>
        public InputAction @RotationLeft => m_Wrapper.m_UniversalMap_RotationLeft;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/HeadPosition".
        /// </summary>
        public InputAction @HeadPosition => m_Wrapper.m_UniversalMap_HeadPosition;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/HeadRotation".
        /// </summary>
        public InputAction @HeadRotation => m_Wrapper.m_UniversalMap_HeadRotation;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/HeadTrackingState".
        /// </summary>
        public InputAction @HeadTrackingState => m_Wrapper.m_UniversalMap_HeadTrackingState;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/LeftTrackingState".
        /// </summary>
        public InputAction @LeftTrackingState => m_Wrapper.m_UniversalMap_LeftTrackingState;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/RightTrackingState".
        /// </summary>
        public InputAction @RightTrackingState => m_Wrapper.m_UniversalMap_RightTrackingState;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/Haptic".
        /// </summary>
        public InputAction @Haptic => m_Wrapper.m_UniversalMap_Haptic;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/Fly".
        /// </summary>
        public InputAction @Fly => m_Wrapper.m_UniversalMap_Fly;
        /// <summary>
        /// Provides access to the underlying input action "UniversalMap/MoveHead".
        /// </summary>
        public InputAction @MoveHead => m_Wrapper.m_UniversalMap_MoveHead;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UniversalMap; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UniversalMapActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UniversalMapActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UniversalMapActions" />
        public void AddCallbacks(IUniversalMapActions instance)
        {
            if (instance == null || m_Wrapper.m_UniversalMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UniversalMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @OpenGizmo.started += instance.OnOpenGizmo;
            @OpenGizmo.performed += instance.OnOpenGizmo;
            @OpenGizmo.canceled += instance.OnOpenGizmo;
            @OpenUI.started += instance.OnOpenUI;
            @OpenUI.performed += instance.OnOpenUI;
            @OpenUI.canceled += instance.OnOpenUI;
            @PositionRight.started += instance.OnPositionRight;
            @PositionRight.performed += instance.OnPositionRight;
            @PositionRight.canceled += instance.OnPositionRight;
            @RotationRight.started += instance.OnRotationRight;
            @RotationRight.performed += instance.OnRotationRight;
            @RotationRight.canceled += instance.OnRotationRight;
            @PositionLeft.started += instance.OnPositionLeft;
            @PositionLeft.performed += instance.OnPositionLeft;
            @PositionLeft.canceled += instance.OnPositionLeft;
            @RotationLeft.started += instance.OnRotationLeft;
            @RotationLeft.performed += instance.OnRotationLeft;
            @RotationLeft.canceled += instance.OnRotationLeft;
            @HeadPosition.started += instance.OnHeadPosition;
            @HeadPosition.performed += instance.OnHeadPosition;
            @HeadPosition.canceled += instance.OnHeadPosition;
            @HeadRotation.started += instance.OnHeadRotation;
            @HeadRotation.performed += instance.OnHeadRotation;
            @HeadRotation.canceled += instance.OnHeadRotation;
            @HeadTrackingState.started += instance.OnHeadTrackingState;
            @HeadTrackingState.performed += instance.OnHeadTrackingState;
            @HeadTrackingState.canceled += instance.OnHeadTrackingState;
            @LeftTrackingState.started += instance.OnLeftTrackingState;
            @LeftTrackingState.performed += instance.OnLeftTrackingState;
            @LeftTrackingState.canceled += instance.OnLeftTrackingState;
            @RightTrackingState.started += instance.OnRightTrackingState;
            @RightTrackingState.performed += instance.OnRightTrackingState;
            @RightTrackingState.canceled += instance.OnRightTrackingState;
            @Haptic.started += instance.OnHaptic;
            @Haptic.performed += instance.OnHaptic;
            @Haptic.canceled += instance.OnHaptic;
            @Fly.started += instance.OnFly;
            @Fly.performed += instance.OnFly;
            @Fly.canceled += instance.OnFly;
            @MoveHead.started += instance.OnMoveHead;
            @MoveHead.performed += instance.OnMoveHead;
            @MoveHead.canceled += instance.OnMoveHead;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UniversalMapActions" />
        private void UnregisterCallbacks(IUniversalMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @OpenGizmo.started -= instance.OnOpenGizmo;
            @OpenGizmo.performed -= instance.OnOpenGizmo;
            @OpenGizmo.canceled -= instance.OnOpenGizmo;
            @OpenUI.started -= instance.OnOpenUI;
            @OpenUI.performed -= instance.OnOpenUI;
            @OpenUI.canceled -= instance.OnOpenUI;
            @PositionRight.started -= instance.OnPositionRight;
            @PositionRight.performed -= instance.OnPositionRight;
            @PositionRight.canceled -= instance.OnPositionRight;
            @RotationRight.started -= instance.OnRotationRight;
            @RotationRight.performed -= instance.OnRotationRight;
            @RotationRight.canceled -= instance.OnRotationRight;
            @PositionLeft.started -= instance.OnPositionLeft;
            @PositionLeft.performed -= instance.OnPositionLeft;
            @PositionLeft.canceled -= instance.OnPositionLeft;
            @RotationLeft.started -= instance.OnRotationLeft;
            @RotationLeft.performed -= instance.OnRotationLeft;
            @RotationLeft.canceled -= instance.OnRotationLeft;
            @HeadPosition.started -= instance.OnHeadPosition;
            @HeadPosition.performed -= instance.OnHeadPosition;
            @HeadPosition.canceled -= instance.OnHeadPosition;
            @HeadRotation.started -= instance.OnHeadRotation;
            @HeadRotation.performed -= instance.OnHeadRotation;
            @HeadRotation.canceled -= instance.OnHeadRotation;
            @HeadTrackingState.started -= instance.OnHeadTrackingState;
            @HeadTrackingState.performed -= instance.OnHeadTrackingState;
            @HeadTrackingState.canceled -= instance.OnHeadTrackingState;
            @LeftTrackingState.started -= instance.OnLeftTrackingState;
            @LeftTrackingState.performed -= instance.OnLeftTrackingState;
            @LeftTrackingState.canceled -= instance.OnLeftTrackingState;
            @RightTrackingState.started -= instance.OnRightTrackingState;
            @RightTrackingState.performed -= instance.OnRightTrackingState;
            @RightTrackingState.canceled -= instance.OnRightTrackingState;
            @Haptic.started -= instance.OnHaptic;
            @Haptic.performed -= instance.OnHaptic;
            @Haptic.canceled -= instance.OnHaptic;
            @Fly.started -= instance.OnFly;
            @Fly.performed -= instance.OnFly;
            @Fly.canceled -= instance.OnFly;
            @MoveHead.started -= instance.OnMoveHead;
            @MoveHead.performed -= instance.OnMoveHead;
            @MoveHead.canceled -= instance.OnMoveHead;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UniversalMapActions.UnregisterCallbacks(IUniversalMapActions)" />.
        /// </summary>
        /// <seealso cref="UniversalMapActions.UnregisterCallbacks(IUniversalMapActions)" />
        public void RemoveCallbacks(IUniversalMapActions instance)
        {
            if (m_Wrapper.m_UniversalMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UniversalMapActions.AddCallbacks(IUniversalMapActions)" />
        /// <seealso cref="UniversalMapActions.RemoveCallbacks(IUniversalMapActions)" />
        /// <seealso cref="UniversalMapActions.UnregisterCallbacks(IUniversalMapActions)" />
        public void SetCallbacks(IUniversalMapActions instance)
        {
            foreach (var item in m_Wrapper.m_UniversalMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UniversalMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UniversalMapActions" /> instance referencing this action map.
    /// </summary>
    public UniversalMapActions @UniversalMap => new UniversalMapActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UniversalMap" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UniversalMapActions.AddCallbacks(IUniversalMapActions)" />
    /// <seealso cref="UniversalMapActions.RemoveCallbacks(IUniversalMapActions)" />
    public interface IUniversalMapActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Look" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLook(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Point" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPoint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grab" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrab(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "OpenGizmo" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenGizmo(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "OpenUI" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenUI(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PositionRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPositionRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RotationRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotationRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PositionLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPositionLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RotationLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotationLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "HeadPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHeadPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "HeadRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHeadRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "HeadTrackingState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHeadTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftTrackingState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightTrackingState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Haptic" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHaptic(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Fly" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFly(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveHead" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveHead(InputAction.CallbackContext context);
    }
}
